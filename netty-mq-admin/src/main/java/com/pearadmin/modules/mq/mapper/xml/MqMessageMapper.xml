<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pearadmin.modules.mq.mapper.MqMessageMapper">

    <resultMap type="com.netty.mq.MqMessage" id="MqMessageResult">
        <result property="id" column="id"/>
        <result property="topic" column="topic"/>
        <result property="group" column="group"/>
        <result property="data" column="data"/>
        <result property="status" column="status"/>
        <result property="retryCount" column="retry_count"/>
        <result property="shardingId" column="sharding_id"/>
        <result property="timeout" column="timeout"/>
        <result property="effectTime" column="effect_time"/>
        <result property="addTime" column="add_time"/>
        <result property="log" column="log"/>
    </resultMap>

    <select id="selectMqMessageList" parameterType="com.netty.mq.MqMessage" resultMap="MqMessageResult">
        select `id`,`topic`,`group`,`data`,`status`,`retry_count`,`sharding_id`,`timeout`,`effect_time`,`add_time`,`log` from `mq_message`
        <where>
             <if test="topic != null  and topic != ''"> and `topic` = #{topic}</if>
             <if test="group != null  and group != ''"> and `group` = #{group}</if>
             <if test="data != null  and data != ''"> and `data` = #{data}</if>
             <if test="status != null  and status != ''"> and `status` = #{status}</if>
             <if test="shardingId != null "> and `sharding_id` = #{shardingId}</if>
        </where>
    </select>



    <insert id="save" parameterType="com.netty.mq.MqMessage" useGeneratedKeys="true" keyProperty="id" >
        INSERT INTO mq_message (
        `topic`,
        `group`,
        `data`,
        `status`,
        `retry_count`,
        `sharding_id`,
        `timeout`,
        `effect_time`,
        `add_time`,
        `log`
        ) VALUES
        <foreach collection ="messageList" item="messageItem" index= "index" separator =",">
            (
            #{messageItem.topic},
            #{messageItem.group},
            #{messageItem.data},
            #{messageItem.status},
            #{messageItem.retryCount},
            #{messageItem.shardingId},
            #{messageItem.timeout},
            <choose>
                <when test="messageItem.effectTime == null">
                    NOW(),
                </when>
                <otherwise>
                    #{messageItem.effectTime},
                </otherwise>
            </choose>
            NOW(),
            #{messageItem.log}
            )
        </foreach >
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="getById" resultType="com.netty.mq.MqMessage">
        SELECT * FROM `mq_message` where id = #{Id}
    </select>

    <update id="update" parameterType ="com.netty.mq.MqMessage">

        UPDATE mq_message AS t
        SET
            t.`group` = #{group},
            t.`data` = #{data},
            t.`status` = #{status},
            t.`retry_count` = #{retryCount},
            t.`sharding_id` = #{shardingId},
            t.`timeout` = #{timeout},
            t.`effect_time` = #{effectTime},
            t.`log` = CONCAT(t.`log`, #{log})
        WHERE t.`id` = #{id}

    </update>

    <select id="pullNewMessage" parameterType="java.util.HashMap" resultMap="MqMessageResult">
        SELECT
        t.`id`,
        t.`topic`,
        t.`group`,
        t.`data`,
        t.`status`,
        t.`retry_count`,
        t.`sharding_id`,
        t.`timeout`,
        t.`effect_time`,
        t.`add_time`,
        t.`log`
        FROM mq_message AS t
        WHERE 	t.topic = #{topic}
        AND t.group = #{group}
        AND t.status = #{newStatus}
        AND t.effect_time <![CDATA[ < ]]> NOW()
        <if test="consumerTotal > 1">
            AND (
            (
            t.sharding_id <![CDATA[ = ]]> 0
            AND
            MOD(t.id, #{consumerTotal}) = #{consumerRank}
            )
            OR
            (
            t.sharding_id <![CDATA[ > ]]> 0
            AND
            MOD(t.sharding_id, #{consumerTotal}) = #{consumerRank}
            )
            )
        </if>
        ORDER BY t.id ASC
        LIMIT #{pagesize}
    </select>


    <update id="lockMessage" parameterType="java.util.HashMap" >
        UPDATE mq_message AS t
        SET
            t.status = #{ingStatus},
            t.`log` = CONCAT(t.`log`, #{appendLog})
        WHERE id = #{id} AND t.status =  #{newStatus}
    </update>


    <update id="updateStatus" parameterType="java.util.HashMap" >
        UPDATE mq_message
        SET
        status =
        <foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
            when #{messageItem.id} then #{messageItem.status}
        </foreach>
        ,
        log =
        <foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
            when #{messageItem.id} then CONCAT(log, #{messageItem.log})
        </foreach>
        WHERE id IN
        <foreach collection="messageList" item="messageItem"  index="index" separator="," open="(" close=")">
            #{messageItem.id}
        </foreach>
    </update>

    <update id="updateRetryCount" parameterType="java.util.HashMap" >
        UPDATE mq_message
        SET
            status = #{newStatus},
            retry_count = retry_count - 1 ,
            effect_time = DATE_ADD(NOW(), Interval 1 minute ),
            log = CONCAT(log, #{appendLog})
        WHERE status =  #{failStatus}
          AND retry_count <![CDATA[ > ]]> 0
    </update>


    <delete id="resetBlockTimeoutMessage" parameterType="java.util.HashMap" >
        update mq_message
        set `status` = #{failStatus},
            log = CONCAT(log, #{appendLog})
        where `status` = #{ingStatus}
          AND NOW() <![CDATA[ > ]]> DATE_ADD( DATE_ADD(effect_time, Interval timeout SECOND) , Interval 1 hour )
    </delete>

</mapper>
